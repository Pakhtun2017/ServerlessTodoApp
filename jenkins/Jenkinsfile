pipeline {
    agent any

    parameters {
        string(name: 'DOMAIN_NAME', defaultValue: 'api.tolstoynow.com', description: 'The domain name for the API Gateway')
        string(name: 'ZONE_ID', defaultValue: 'YOUR_ROUTE_53_ZONE_ID', description: 'The Route 53 Zone ID for the domain')
        string(name: 'AWS_DEFAULT_REGION', defaultValue: 'us-east-1', description: 'The AWS region to use')
    }

    environment {
        AWS_DEFAULT_REGION = "${params.AWS_DEFAULT_REGION}"
    }

    stages {
        stage('Debug Environment Variables') {
            steps {
                script {
                    echo "Debugging Environment Variables..."
                    echo "AWS_DEFAULT_REGION: ${params.AWS_DEFAULT_REGION}"
                    echo "DOMAIN_NAME: ${params.DOMAIN_NAME}"
                    echo "ZONE_ID: ${params.ZONE_ID}"
                }
            }
        }
        stage('Setup Python Environment') {
            steps {
                sh '''
                # Install the desired Python version (e.g., Python 3.12)
                sudo apt-get update
                sudo apt-get install -y python3.12 python3.12-venv

                # Create a new virtual environment using Python 3.12
                python3.12 -m venv venv

                # Activate the virtual environment
                . venv/bin/activate

                # Upgrade pip and install required packages
                pip install --upgrade pip
                pip install Flask==2.0.1 boto3 awsgi
                '''
            }
        }
        stage('Checkout') {
            steps {
                git url: 'https://github.com/Pakhtun2017/ServerlessTodoApp.git',
                    branch: 'main',
                    credentialsId: 'github-credentials'
            }
        }

        stage('Verify AWS Credentials') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws_credentials_id',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    sh 'aws sts get-caller-identity'
                }
            }
        }
        stage('Terraform Init') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws_credentials_id',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    dir('terraform') {
                        sh 'terraform init'
                    }
                }
            }
        }
        stage('Terraform Apply Initial') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws_credentials_id',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    script {
                        dir('terraform') {
                            sh """
                            terraform apply -auto-approve \
                            -var="region=${params.AWS_DEFAULT_REGION}" \
                            -var="domain_name=${params.DOMAIN_NAME}" \
                            -var="zone_id=${params.ZONE_ID}"
                            """
                        }
                    }
                }
            }
        }
        stage('Retrieve Terraform Outputs') {
            steps {
                script {
                    dir('terraform') {
                        def s3_bucket_name = sh(script: 'terraform output -raw s3_bucket_name', returnStdout: true).trim()
                        def lambda_role_name = sh(script: 'terraform output -raw lambda_role_name', returnStdout: true).trim()

                        // Debug output values
                        echo "S3 Bucket Name: ${s3_bucket_name}"
                        echo "Lambda Role Name: ${lambda_role_name}"

                        // Store the outputs in environment variables
                        env.S3_BUCKET_NAME = s3_bucket_name
                        env.LAMBDA_ROLE_NAME = lambda_role_name
                    }
                }
            }
        }
        stage('Package Lambda Function') {
            steps {
                script {
                    // Package the Lambda function code
                    sh '''
                    . venv/bin/activate
                    zip -r lambda_function.zip app.py lambda_function.py tasks.py venv/lib/python3.12/site-packages
                    '''
                }
            }
        }
        stage('Upload to S3') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws_credentials_id',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    script {
                        // Upload the Lambda package to S3 using the dynamically retrieved bucket name
                        sh '''
                        aws s3 cp lambda_function.zip s3://${S3_BUCKET_NAME}/lambda_function.zip
                        '''
                    }
                }
            }
        }
        stage('Terraform Apply Final') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws_credentials_id',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    script {
                        dir('terraform') {
                            // Apply Terraform configuration to create Lambda, API Gateway, and other resources
                            sh """
                            terraform apply -auto-approve \
                            -var="region=${params.AWS_DEFAULT_REGION}" \
                            -var="domain_name=${params.DOMAIN_NAME}" \
                            -var="zone_id=${params.ZONE_ID}"
                            """
                        }
                    }
                }
            }
        }
    }
}
