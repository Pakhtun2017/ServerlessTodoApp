pipeline {
    agent any

    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
																				
    }

    stages {
        stage('Debug Environment Variables') {
            steps {
                script {
                    echo "Debugging Environment Variables..."
                    echo "AWS_DEFAULT_REGION: ${env.AWS_DEFAULT_REGION}"
																
                }
            }
        }
        stage('Setup Python Environment') {
            steps {
                sh '''
                # Install the desired Python version (e.g., Python 3.12)
                # Adjust the command below to install Python if it's not already available
                sudo apt-get update
                sudo apt-get install -y python3.12 python3.12-venv

                # Create a new virtual environment using Python 3.12
                python3.12 -m venv venv

                # Activate the virtual environment
                . venv/bin/activate

                # Upgrade pip and install required packages
                pip install --upgrade pip
                pip install Flask==2.0.1 boto3 awsgi
                '''
            }
        }
        stage('Checkout') {
            steps {
                git url: 'https://github.com/Pakhtun2017/todo-flask-lambda.git',
                    branch: 'main',
                    credentialsId: 'github-credentials'
            }
        }

        stage('Verify AWS Credentials') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws_credentials_id',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    sh 'aws sts get-caller-identity'
                }
            }
        }
        stage('Package Lambda Function') {
            steps {
                script {
                    // Package the Lambda function code
                    sh '''
                    . venv/bin/activate
                    zip -r lambda_function.zip app.py lambda_function.py tasks.py venv/lib/python3.8/site-packages
                    '''
                }
            }
        }
        stage('Upload to S3') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws_credentials_id',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    script {
                        // Upload the Lambda package to S3
                        sh '''
                        aws s3 cp lambda_function.zip s3://your-bucket-name/lambda_function.zip
															
                        '''
                    }
                }
            }
        }
        stage('Terraform Init') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws_credentials_id',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    dir('terraform') {
                        sh 'terraform init'
                    }
                }
            }
        }
        stage('Terraform Apply Initial') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws_credentials_id',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    script {
                        dir('terraform') {
                            sh """
                            terraform apply -auto-approve \
                            -var="region=${env.AWS_DEFAULT_REGION}" \
                            -var="domain_name=api.tolstoynow.com" \
                            -var="zone_id=YOUR_ROUTE_53_ZONE_ID" \
                            -var="final_stage=false"
                            """
                        }
                    }
                }
            }
        }
        stage('Terraform Apply Final') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws_credentials_id',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    script {
                        dir('terraform') {
                            // Apply Terraform configuration to create Lambda, API Gateway, and other resources
                            sh """
                            terraform apply -auto-approve \
                            -var="region=${env.AWS_DEFAULT_REGION}" \
                            -var="domain_name=api.tolstoynow.com" \
                            -var="zone_id=YOUR_ROUTE_53_ZONE_ID" \
                            -var="final_stage=true"
                            """
                        }
                    }
                }
            }
        }
    }
}
